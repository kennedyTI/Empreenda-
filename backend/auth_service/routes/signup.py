# auth_service/routes/signup.py

from fastapi import APIRouter, HTTPException, Request
from auth_service.schemas.user import SignupRequest, SignupResponse  # Schemas para entrada e sa√≠da
from auth_service.services.user_service import criar_usuario         # Servi√ßo para cria√ß√£o no MongoDB
from auth_service.utils.limiter import verificar_limite_ip           # Prote√ß√£o contra spam por IP

router = APIRouter()  # Cria o roteador

@router.post("/signup", response_model=SignupResponse)
def signup(request: Request, dados: SignupRequest):
    """
    Rota respons√°vel por cadastrar um novo usu√°rio.

    Funcionalidades:
    - Limita requisi√ß√µes consecutivas por IP (prote√ß√£o contra spam tempor√°ria).
    - Valida os dados via Pydantic (nome, email, senha).
    - Persiste o usu√°rio no MongoDB.
    - Retorna mensagem de sucesso com o ID gerado.
    """

    # üö´ Verifica se o IP ultrapassou o limite de requisi√ß√µes permitidas
    ip = request.client.host
    verificar_limite_ip(ip)

    try:
        # Cria o usu√°rio no banco
        user_id = criar_usuario(dados)

        # Retorna confirma√ß√£o com ID
        return SignupResponse(mensagem="Usu√°rio criado com sucesso", id=str(user_id))

    except HTTPException as e:
        # Lan√ßa exce√ß√µes previstas (ex: email duplicado)
        raise e

    except Exception as e:
        # Erros inesperados (ex: falha no Mongo)
        raise HTTPException(status_code=500, detail=f"Erro ao cadastrar usu√°rio: {e}")
