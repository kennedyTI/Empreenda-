Tutorials:

1춹) Ambiente virtual.
	
	1.1춹)python -m venv env => cria um ambiente virtual:
	
	1.2춹)env\Scripts\activate => ativa o ambiente virtual:

		OBS) Caso o sistemas windows n칚o d칡 permiss칚o, No PowerShell digite o seguinte comando e pressione enter seguintes c칩digos abaixo:
			
			a) Set-ExecutionPolicy -ExecutionPolicy Unrestricted -Scope CurrentUser
			b) Ser치 perguntado se deseja aceitar as mudan칞as, digite s e pressione enter para confirmar.
			c) Seguindo os passos acima ser치 liberado a permiss칚o para a execu칞칚o de scripts no PowerShell
	
 		1.3춹)Clear => Limpa o terminal



 2춹) Pip.
		
	2.1춹)python.exe -m pip install --upgrade pip => atualiza o pip install
 
 	2.2춹)python -m pip list => exibir치 todos os pacotes instalados no ambiente virtual:
	
	2.3춹)pip freeze > requirements.txt => produzir치 uma lista dos pacotes instalados:
	
	2.4춹)python -m pip install -r requirements.txt => instala todos os pacotes listados no requirements:
	
	2.5춹)pip uninstall NomeDaBiblioteca => Desinstala a biblioteca desejada.

3춹) Django.

	3.1춹)pip3 install django => instala o django:

	3.2춹)django-admin startproject NomeDoProjeto . => cria um novo projeto:

	3.3춹)python3 manage.py runserver => inicia o projeto:
	
	3.4춹)python3 manage.py startapp NomeDoApp=> cria um novo App(tela):
		
		a) Ao criar um novo app, v치 em settings.py da pasta principal e adiciona o nome do app na lista INSTALLED_APPS.

4춹) Git.

		4.1춹)git init => iniciar o git:

		4.2춹)crie um arquivo '.gitignore' onde conter치 uma lista de itens que devem ser ignorados pelo git:
		
		4.3춹)git add . => adiciona todos os arquivos local no commit:

		4.4춹)git status => verifica o status dos aquivos:

		4.5춹)git commit -m 'tipagem: Coment치rio' => realiza o commit dos arquivos:

5춹) Flask.

		5.1춹)pip3 install Flask => instala o Flask:			

6춹) pre-commit.

		6.1춹)pip3 install pre-commit => instala a biblioteca pre-commit:

		6.2춹)crie um arquivo '.pre-commit-config.yaml' que atualizar치 automaticamente a lista requirements.txt add todas as bibliotecas utilizadas:

		6.3춹)pre-commit install => instala o pre-commit:


7춹) Docker.

		7.1춹)docker build -- tag (nome da imagem) => cria uma imagem no docker:

		7.2춹)docker images => mostra as imagens salvas:

		7.3춹)docker ps -a => mostra os containers:

		7.4춹)docker run -d -p 8000:8000 --name django python3_django5 => cria um container:

			a) -d => nescess치rio para rodar em segundo plano:
			b) -p => nescess치rio para adcionar a porta:
			c) name => nescess치rio para adcionar o nome do container:

		7.5춹)docker stop (nome do container) => para o container:

		7.6춹)docker start (nome do container) => inicia o container:

		7.7춹)docker exec -it (nome do container) bash => entra no container:
		
		7.8춹)docker rm (nome do container) => remove o container:

		7.9춹)docker rmi (nome da imagem) => remove a imagem:

		7.10춹)docker compose up => Inicia todos os servi칞os/configura칞칫es definidos no arquivo docker-compose.yml:

   8춹) NodeJS

	8.1춹)Baixe e instale o NodeJS:
	
	8.2춹)npm install --global yarn => Abra o PowerShell e execute esse comando:
	
	8.3춹)npm install -g gulp => Abra o PowerShell e execute esse comando:
	
	8.4춹)yarn install => Abra o PowerShell e execute esse comando:
	
	8.5춹)gulp => Abra o PowerShell e execute esse comando:
	
	8.6춹)python manage.py migrate => Atualiza os dados no Banco de Dados:
	
	8.7춹)python manage.py createsuperuser => Criar super usu치rio para o servidor:
		
	

游댢 MELHORIAS FUTURAS: 
	models/user.py
		Converter para uso de motor (async MongoDB) no futuro para escalabilidade.
		Separar pwd_context para utils/security.py se quiser centralizar todas as fun칞칫es de hashing
	auth_service/routes/signup.py
		Separar IP real em proxies (usando X-Forwarded-For) para cloud
		Adicionar confirma칞칚o de e-mail ap칩s cadastro
		Testes automatizados simulando limites de IP e casos inv치lidos
	utils/limiter
		 Para ambientes de produ칞칚o, recomenda-se:
		 	Redis (via fastapi-limiter)
			Cloudflare / API Gateway / WAF externo
